#version 330 core

in vec3 world_normal;
in vec3 frag_pos;
in vec4 frag_pos_ls;
in vec3 cam_pos;

out vec4 FragColor;

uniform vec4 color;
uniform bool respect_normals;



void main() {


	if (respect_normals) {
		vec3 sun_position = vec3(200, 200.0, 0.0);

		vec3 sun_to_fragment = normalize(frag_pos - sun_position);
		vec3 fragment_to_sun = -sun_to_fragment;



		float diffuse_intensity = max(dot(fragment_to_sun, world_normal), 0);


		vec3 object_to_camera = normalize(cam_pos - frag_pos);


		float ambient_intensity = 0.1;

		vec3 I = sun_to_fragment;
		vec3 N = world_normal;

		vec3 reflect = I - 2.0 * dot(N, I) * N;
		float cos_reflect = dot(reflect, object_to_camera);

		float spec_intensity = pow(max(cos_reflect, 0), 256);


		float intensity = 0.5 * spec_intensity + diffuse_intensity + ambient_intensity;

		FragColor = vec4(intensity * color.xyz, 1.0);


	}
	else {
		FragColor = vec4(color);
	}

}
